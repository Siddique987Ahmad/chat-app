<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <h1>Doctor-Patient Chat</h1>

    <div id="chat">
        <!-- Messages container -->
        <div id="messages">
            <!-- Display existing messages with sender role styling -->
            <% if (messages && messages.length > 0) { %>
                <% messages.forEach((message) => { %>
                    <div class="<%= message.senderRole === 'doctor' ? 'doctor-message' : 'patient-message' %>">
                        <strong><%= message.senderRole %>:</strong> <%= message.text %> 
                        <small><%= new Date(message.timestamp).toLocaleTimeString() %></small>
                    </div>
                <% }) %>
            <% } else { %>
                <p>No messages yet. Start the conversation!</p>
            <% } %>
        </div>

        <!-- Message input and typing indicator -->
        <input id="messageInput" placeholder="Type a message...">
        <div id="typingIndicator"></div>
    </div>

    <!-- Include Socket.IO and client script -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const messageInput = document.getElementById('messageInput');
        const messagesDiv = document.getElementById('messages');
        const typingIndicator = document.getElementById('typingIndicator');
        
        // Retrieve senderRole passed from server and ensure it is correct
        const senderRole = '<%= senderRole %>';  // 'doctor' or 'patient' based on the session or context

        // Send message on Enter key press
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && messageInput.value.trim()) {
                const message = messageInput.value;
                socket.emit('sendMessage', { text: message, senderRole });
                messageInput.value = ''; // Clear input after sending
            }
        });

        // Show typing indicator when user is typing
        messageInput.addEventListener('input', () => {
            socket.emit('typing', { isTyping: messageInput.value.length > 0, senderRole });
        });

        // Listen for new messages
        socket.on('receiveMessage', (data) => {
            const messageElement = document.createElement('div');
            messageElement.className = data.senderRole === 'doctor' ? 'doctor-message' : 'patient-message';
            messageElement.innerHTML = `<strong>${data.senderRole}:</strong> ${data.text} <small>${new Date(data.timestamp).toLocaleTimeString()}</small>`;
            messagesDiv.appendChild(messageElement);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;  // Scroll to the latest message
        });

        // Display typing indicator when other users are typing
        socket.on('userTyping', (data) => {
            typingIndicator.textContent = data.isTyping ? `${data.senderRole} is typing...` : '';
        });
    </script>
</body>
</html>
